name: Deploy Travel Buddy to Azure

on:
  push:
    branches: [ main, master ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: 'travelbuddy-app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_GOOGLE_PLACES_API_KEY: ${{ secrets.VITE_GOOGLE_PLACES_API_KEY }}
        VITE_UNSPLASH_ACCESS_KEY: ${{ secrets.VITE_UNSPLASH_ACCESS_KEY }}
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci --omit=dev
    
    - name: Copy frontend build to backend
      run: |
        mkdir -p backend/public
        cp -r frontend/dist/* backend/public/
    
    - name: Create web.config for Azure
      run: |
        cat > backend/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}"/>
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="server.js"/>
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering>
                <hiddenSegments>
                  <remove segment="bin"/>
                </hiddenSegments>
              </requestFiltering>
            </security>
            <httpErrors existingResponse="PassThrough" />
            <iisnode watchedFiles="web.config;*.js"/>
          </system.webServer>
        </configuration>
        EOF
    
    - name: Create deployment package
      run: |
        cd backend
        zip -r ../deployment.zip . -x "node_modules/.cache/*" "*.log"
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: deployment.zip
    
    - name: Clean up
      run: rm deployment.zip

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    
    steps:
    - name: Wait for deployment
      run: sleep 45
    
    - name: Health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health)
        if [ $response -eq 200 ]; then
          echo "‚úÖ API health check passed"
        else
          echo "‚ùå API health check failed with status code: $response"
        fi
        
        # Check frontend
        frontend_response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net/)
        if [ $frontend_response -eq 200 ]; then
          echo "‚úÖ Frontend health check passed"
        else
          echo "‚ùå Frontend health check failed with status code: $frontend_response"
        fi

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, health-check]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ] && [ "${{ needs.health-check.result }}" == "success" ]; then
          echo "üöÄ Travel Buddy deployment successful!"
          echo "üåê App URL: https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        else
          echo "üí• Travel Buddy deployment failed"
          echo "Build status: ${{ needs.build-and-deploy.result }}"
          echo "Health check status: ${{ needs.health-check.result }}"
        fi